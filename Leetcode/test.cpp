#include<iostream>
#include<unordered_map>
using namespace std;

const int N = 1e5+10;
int nums[N], tnum=0, top=0;
char ops[N];
unordered_map<char, int> hashtable;

const char pri[7][7] = {
    '>', '>', '<', '<', '<', '>', '>',
    '>', '>', '<', '<', '<', '>', '>',
    '>', '>', '>', '>', '<', '>', '>',
    '>', '>', '>', '>', '<', '>', '>',
    '<', '<', '<', '<', '<', '=', ' ',
    ' ', ' ', ' ', ' ', ' ', ' ', ' ',
    '<', '<', '<', '<', '<', ' ', '='
};

void init_hash(){
    hashtable['+'] = 0;
    hashtable['-'] = 1;
    hashtable['*'] = 2;
    hashtable['/'] = 3;
    hashtable['('] = 4;
    hashtable[')'] = 5;
    hashtable['\0'] = 6;
}

int main(){
    string s = "(3/((1)*1)-3)+2*3-1-2-1-((1-3))*2-3+1-3-3-3*2-((2*2)+1*3)*3+2-2*3+3+1+2+(3+3)/3/2*3+2-(1*2/1)+2*3+2/2+3+(((2*2)))*2+2*2/2*2-(1/3)-1+3/2-1+((3*2)/3*2)+3*3*2*2+1-2+(1+1)*1+2*2+2*3-2+(((2*2)))-2*2+2-2-3-2-(3-2+2)/3*2/2/2/3-2+(1*1)*3*3*1+((2*(1-3)))*1*3/1+3*1*2-(((2+2))/3)*2*3*1+3/(3/3*1)*1*2*2*1-3*(1-2)*3/2/1+(3*((1)*2))*3/1-1*2*2/2+((3*(2)*3)*1)+1*2*1-2+(1*(1*3))/1+1/2/3-((1/3))/2*2+2/1+3/(2*2*3)*3/3*3+2-((1/(1+1)))/3-1/3*1+3-2-((2*2))+2-3+2/1+((1/1-1)+2)/3*3-1-2+1-(3*2)/3+3-3-(2+1)*2+2*2-1-(3-((1)*2)*1)-1/3-2+3-(1*(3)+3)*3+1*3*3*2+((3*1))*1/2-1-3+((1+3*2)+1)/1/1/1+3*2-1/(1/3-1+2)+1*2+2-2*3+2*3/((2-1))+3-1/1-2/2-(3-3+3)*2*3+2-((3/(3))*1)/3*1*1+(((2-3)*2))/3-2+3+1-(3*2/3)*3*1*1*3-(3/(2*3)/2)+3/3*3-2*2-2+((2*3-3))/3-3-1+2*1*1-(3*3)/1*(2-2)*3*2-1-3*3+(2*(3*3))+3/2+1*3-(((3*3))*3)*1/1+3-(3*(3*3)/3-1)*3+3-2-1+2+(((1*2))*1)+2*3*2+2*((1+1*3)*1)-3+2*3-1*2+(3*2-(2)*2)/2*3*1-3+1+2-((1*(3)*3+3))+3+1/1/2+2*1+1+1*((3+2))/3*2-2-1*1-(3/(3+3)*3)/2-3*3-1-2-1+(1/3)+2-3*1*1-(3/(3+3))*2-3*3-3-((3*1)/2)+3+3*1/3/3-(2-1-1)/2-1*1*2+(3+1)*1+2*2*3-1+((1-3)+1)-3*1/3+((1-3))+3-1/3*2+(1-(3*2)+1)*1/1*2/1+(((2*3)))/2*2*3*2-((3/2))-(1+2*1)+2+2/3-3*1-(3*(2/1+2))-3+1-3/3+1*2-(((1/1))*2)+3*1*2+(3/(2*(2))+3)*1*1*3-2*3+(2/(1-(1-3))*1)*1*3+2/2*1-(3-1*1+2)/1/1/2*1+((3-3-1)-2)+1-3*3/1-3/3*2*(3+3)-3*2*2+1+3-3*(1/2)*1*3/1+(2/3+(2)+1)-2+2+3/3-((1-2)+1)/2-1*3+1*((2*2-2)/1)+3*3*3*3*3-((3*(3))-3)+1*1*3*2+1+(3-2/1)*2*2+3*1+1+1*((1-2))-2/2-1+3+2+(3-(2+2))-2-2/2-2*3/1+2/(1*1/3+1)-3+2-2*3-2+((1+2)*3)/2-1-3-1*1-2+2*(((2/1)))/2-3*1-1*3+(1/3-(1*3))*2*3/2*3/2-((1*3))/2-2*1/2+2/2*(3-3)+1-3*1+2+(1+(1-3))-1+2-2+1-(2-1)+1/2-2*2+2-((1-3*2)+2)/3*1*3-3-1-((3-(2*3)))*3-1*3*1*1-1+((3*(1))*3)+3*1-2+((3*2))+3+1*3*3+3+(3*1)*1*(3/1)*2*1-2*1/2+(3-(2)*3)+2-3-3-2+2-((1/1))*2*1/1*2/3+(2*3)-2+3/3+1*1-((1+(3))*2)*2+1+2*3+(3-(1+2))-2-3*2*2*2-3+(3+(1)/3)/2*3+3*3-3-(((2*2))*1)*2/1/1*1*1*1-(3/1)*1/2/1-3/3+1-1+(2-(3-1))*2+2*2*2*1-3+((3+(1))*2)*2+1-2/3*1+(2+(1)*1-3)/2*1/1+3+(2-1*3)/2+3*3+2*2+(3*2*1-3)+2+3*2-1-1*(3*2)*2-2/1-2-3*1";
    // cin>>s;
    
    ops[++top] = '\0';
    init_hash();
    
    for(int i=0; top; )
    {
        if(s[i]>='0' && s[i]<='9'){
            if(i>1 && s[i-1]>='0' && s[i-1]<='9')
                nums[tnum] = nums[tnum]*10 + (int)(s[i]-48);
            else
                nums[++tnum] = (int)(s[i]-48);
            ++i;
        }
        else{
            switch(pri[hashtable[ops[top]]][hashtable[s[i]]]){
                case '<':
                    ops[++top] = s[i++];
                    break;
                case '=':
                    --top;
                    ++i;
                    break;
                case '>':
                    int l = nums[tnum--], r = nums[tnum--];
                    switch(ops[top--]){
                        case '+':
                            nums[++tnum] = l + r;
                            break;
                        case '-':
                            nums[++tnum] = r - l;
                            break;
                        case '*':
                            nums[++tnum] = l * r;
                            break;
                        case '/':
                            int temp = r / l;
                            nums[++tnum] = temp?temp:temp-1;
                            break;
                    }
                    break;
            }
        }
    }
    
    printf("%d", nums[tnum]);
    return 0;
}